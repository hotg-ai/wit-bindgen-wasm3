---
source: codegen/tests/codegen.rs
expression: record
---
pub mod record {
    #[allow(unused_imports)]
    use wit_bindgen_wasm3::rt::{anyhow, wasm3};
    #[derive(Clone)]
    pub struct Foo<'a> {
        pub bar: &'a str,
    }
    impl<'a> std::fmt::Debug for Foo<'a> {
        fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
            f.debug_struct("Foo").field("bar", &self.bar).finish()
        }
    }

    /// Auxiliary data associated with the wasm exports.
    ///
    /// This is required to be stored within the data of a
    /// `Store<T>` itself so lifting/lowering state can be managed
    /// when translating between the host and wasm.
    #[derive(Default)]
    pub struct RecordData<'rt> {}
    pub struct Record<T> {
        get_state: Box<dyn Fn(&mut T) -> &mut RecordData + Send + Sync>,
        canonical_abi_realloc:
            wit_bindgen_wasm3::rt::wasm3::Function<'rt, (i32, i32, i32, i32), i32>,
        start: wit_bindgen_wasm3::rt::wasm3::Function<'rt, (i32, i32), ()>,
    }
    impl<T> Record<T> {
        #[allow(unused_variables)]

        /// Adds any intrinsics, if necessary for this exported wasm
        /// functionality to the `linker` provided.
        ///
        /// The `get_state` closure is required to access the
        /// auxiliary data necessary for these wasm exports from
        /// the general store's state.
        pub fn add_to_linker(
            linker: &mut wasmtime::Linker<T>,
            get_state: impl Fn(&mut T) -> &mut RecordData + Send + Sync + Copy + 'static,
        ) -> anyhow::Result<()> {
            Ok(())
        }

        /// Instantiates the provided `module` using the specified
        /// parameters, wrapping up the result in a structure that
        /// translates between wasm and the host.
        ///
        /// The `linker` provided will have intrinsics added to it
        /// automatically, so it's not necessary to call
        /// `add_to_linker` beforehand. This function will
        /// instantiate the `module` otherwise using `linker`, and
        /// both an instance of this structure and the underlying
        /// `wasmtime::Instance` will be returned.
        ///
        /// The `get_state` parameter is used to access the
        /// auxiliary state necessary for these wasm exports from
        /// the general store state `T`.
        pub fn instantiate(
            mut store: impl wasmtime::AsContextMut<Data = T>,
            module: &wasmtime::Module,
            linker: &mut wasmtime::Linker<T>,
            get_state: impl Fn(&mut T) -> &mut RecordData + Send + Sync + Copy + 'static,
        ) -> anyhow::Result<(Self, wasmtime::Instance)> {
            Self::add_to_linker(linker, get_state)?;
            let instance = linker.instantiate(&mut store, module)?;
            Ok((Self::new(store, &instance, get_state)?, instance))
        }

        /// Low-level creation wrapper for wrapping up the exports
        /// of the `instance` provided in this structure of wasm
        /// exports.
        ///
        /// This function will extract exports from the `instance`
        /// defined within `store` and wrap them all up in the
        /// returned structure which can be used to interact with
        /// the wasm module.
        pub fn new(
            mut store: impl wasmtime::AsContextMut<Data = T>,
            instance: &wasmtime::Instance,
            get_state: impl Fn(&mut T) -> &mut RecordData + Send + Sync + Copy + 'static,
        ) -> anyhow::Result<Self> {
            let mut store = store.as_context_mut();
            let canonical_abi_realloc = instance.get_typed_func::<(i32, i32, i32, i32), i32, _>(
                &mut store,
                "canonical_abi_realloc",
            )?;
            let start = instance.get_typed_func::<(i32, i32), (), _>(&mut store, "start")?;
            Ok(Record {
                canonical_abi_realloc,
                start,
                get_state: Box::new(get_state),
            })
        }
        pub fn start(
            &self,
            mut caller: wit_bindgen_wasm3::rt::wasm3::Runtime<'_>,
            value: Foo<'_>,
        ) -> Result<(), wit_bindgen_wasm3::rt::wasm3::error::Trap> {
            let func_canonical_abi_realloc = &self.canonical_abi_realloc;
            let memory = unsafe { &mut *ctx.memory_mut() };
            let Foo { bar: bar0 } = value;
            let vec1 = bar0;
            let ptr1 =
                func_canonical_abi_realloc.call(&mut caller, (0, 0, 1, (vec1.len() as i32) * 1))?;
            memory
                .data_mut(&mut caller)
                .store_many(ptr1, vec1.as_ref())?;
            self.start.call(&mut caller, (ptr1, vec1.len() as i32))?;
            Ok(())
        }
    }
    use wit_bindgen_wasm3::rt::RawMem;
}

