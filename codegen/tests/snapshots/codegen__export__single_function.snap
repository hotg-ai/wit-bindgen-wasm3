---
source: codegen/tests/codegen.rs
expression: single_function
---
pub mod thunk {
    #[allow(unused_imports)]
    use wit_bindgen_wasm3::rt::{anyhow, wasm3};
    pub trait Thunk: Sized {
        fn start(&mut self);
    }

    pub fn register<U>(
        module: &wit_bindgen_wasm3::rt::wasm3::Module<'_>,
        state: U,
    ) -> wit_bindgen_wasm3::rt::wasm3::Result<()>
    where
        U: Thunk + Send + Sync + 'static,
    {
        let state = Arc::new(Mutex::new(state));
        {
            let state = Arc::clone(&state);
            module.link_closure(
                "thunk",
                "start",
                move |mut caller: wit_bindgen_wasm3::rt::wasm3::CallContext<'_>| {
                    let state = state.lock().expect("lock was poisoned");
                    state.start();
                    Ok(())
                },
            )?;
        }
        Ok(())
    }
}

